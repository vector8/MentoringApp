// <auto-generated />
using MentoringApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MentoringApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180123213742_MenteeFull")]
    partial class MenteeFull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MentoringApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MentoringApp.Models.Mentee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Allergies");

                    b.Property<string>("AppreciatesNature");

                    b.Property<DateTime?>("ArriveInCanada");

                    b.Property<bool?>("CanContact");

                    b.Property<string>("ConnectWithPeersPriority");

                    b.Property<string>("ConnectWithUpperYearsPriority");

                    b.Property<string>("CountryOfOrigin");

                    b.Property<string>("DietaryRequirements");

                    b.Property<string>("DoesWhatTheyWant");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EnjoysDiscovering");

                    b.Property<string>("Faculty")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("GainProgramInfoPriority");

                    b.Property<string>("GenderIdentity");

                    b.Property<string>("HandlesStressWell");

                    b.Property<string>("HelpsOthers");

                    b.Property<bool?>("InternationalStudentOrientation");

                    b.Property<string>("IsAthletic");

                    b.Property<string>("IsCheerful");

                    b.Property<bool?>("IsFirstGen");

                    b.Property<bool?>("IsGrad");

                    b.Property<bool?>("IsIndigenous");

                    b.Property<string>("IsInternationalOrExchange");

                    b.Property<bool?>("IsMature");

                    b.Property<bool?>("IsPathways");

                    b.Property<string>("IsReserved");

                    b.Property<bool?>("IsTransfer");

                    b.Property<bool?>("IsWoman");

                    b.Property<string>("KeepsRoomTidy");

                    b.Property<string>("Languages");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LearnCampusServicesPriority");

                    b.Property<string>("LearnExpectationsPriority");

                    b.Property<string>("LivesInHarmony");

                    b.Property<string>("MeetOtherStudents21");

                    b.Property<string>("MeetOtherStudentsClasses");

                    b.Property<string>("MeetOtherStudentsClubs");

                    b.Property<string>("MeetOtherStudentsCommute");

                    b.Property<string>("MeetOtherStudentsFirstGen");

                    b.Property<string>("MeetOtherStudentsInFaculty");

                    b.Property<string>("MeetOtherStudentsIndigenous");

                    b.Property<string>("MeetOtherStudentsInt");

                    b.Property<string>("MeetOtherStudentsOffCampus");

                    b.Property<string>("MeetOtherStudentsOnCampus");

                    b.Property<string>("MeetOtherStudentsTransfer");

                    b.Property<string>("MeetsResponsibilities");

                    b.Property<bool?>("MtpsOrientation");

                    b.Property<bool?>("NaspProgram");

                    b.Property<DateTime?>("NaspRegisterDate");

                    b.Property<string>("NeedsQuietTime");

                    b.Property<string>("Phone");

                    b.Property<string>("PrevInstitution");

                    b.Property<string>("Program")
                        .IsRequired();

                    b.Property<string>("QuickToTrust");

                    b.Property<string>("RacialIdentity");

                    b.Property<string>("Religion");

                    b.Property<string>("RespectsTraditions");

                    b.Property<string>("SexualOrientation");

                    b.Property<string>("Thoughtful");

                    b.Property<string>("UnderstandScienceMath");

                    b.Property<bool?>("WillAttendIgnite");

                    b.Property<string>("WorksHard");

                    b.HasKey("ID");

                    b.ToTable("Mentee");
                });

            modelBuilder.Entity("MentoringApp.Models.Mentor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Faculty")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("Program")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentoringApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoringApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
